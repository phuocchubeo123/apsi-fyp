/*
 * cuckoo.h
 *
 *  Created on: Oct 7, 2014
 *      Author: mzohner
 */

#ifndef CUCKOO_H_
#define CUCKOO_H_

#include "hashing_util.h"
#include "apsi/item.h"

struct cuckoo_entry_ctx {
	//id of the element in the source set
	uint32_t eleid;
	//addresses the bin of the cuckoo entry in the cuckoo table, will only work for up to 2^{32} bins
	uint32_t address[NUM_HASH_FUNCTIONS];
	//the value of the entry
	uint8_t* val;
	//which position is the entry currently mapped to
	uint32_t pos;
#ifdef DEBUG_CUCKOO
	uint8_t* element;
#endif
};

struct cuckoo_entry_gen_ctx {
	//starting position in the generation process
	uint32_t startpos;
	//end position of entries that are generated by this thread
	uint32_t endpos;
	//input elements
	uint8_t* elements;
	//pointer to the cuckoo entries
	cuckoo_entry_ctx* cuckoo_entries;
};

namespace apsi{
	namespace hashing{
		struct CuckooEntry{	
		public:
			CuckooEntry(uint32_t hash_functions_count){
				hash_functions_count_ = hash_functions_count;	
				address_.resize(hash_functions_count_);
			}

		private:
			uint32_t hash_functions_count_;
			vector<uint32_t> address_;
		};


		class CuckooTable{
		public:

			CuckooTable(PSIParams params, Item empty_element);

			void cuckoo_hashing();
			void insert_element(CuckooEntry element);		

		private:
			uint32_t hash_table_size;
			vector<Item> hash_table;

			uint32_t hash_functions_count;
			uint32_t max_iterations;
			uint32_t bit_length;
			uint32_t out_bit_length;
			uint32_t* perm;
			prf_state_ctx* prf_state;
		}; // class CuckooHashing
	} // namespace hashing
} // namespace apsi


#endif /*CUCKOO_H_*/